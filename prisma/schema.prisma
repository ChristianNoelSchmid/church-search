datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

generator client {
    provider = "prisma-client-js"
}

// The type of a single account
enum UserType {
    Church
    Individual
}

enum Role {
    User
    Admin
}

// All relevant information needed to generate, validate,
// and log the history of refresh tokens
model RefreshToken {

    id      Int      @id @default(autoincrement())
    token   String   @db.VarChar(255)
    expires DateTime

    created     DateTime  @default(now())
    createdByIp String    @db.VarChar(127)
    revoked     DateTime?
    revokedByIp String?   @db.VarChar(127)

    replacementId Int?

    userId String? @db.VarChar(255)
    user   User?   @relation(fields: [userId], references: [id])
}

// A user account, which holds all unique data to a particular user
model User {
    id           String    @id @default(uuid()) @db.VarChar(255)
    email        String    @unique @db.VarChar(255)
    passwordHash String
    userType     UserType? // Admin users do not have a UserType defined
    role         Role

    photoUrl String? @db.VarChar(255)

    confirmedEmail      Boolean @default(false)
    confirmedEmailRoute String? @unique @db.VarChar(64)
    replacementEmail    String? @db.VarChar(255)

    aboutMe String @db.VarChar(1024)

    // The User's personal profile. One of these
    // will be populated, depending on the UserType
    church Church?
    indiv  Individual?

    // The User's Refresh tokens
    refreshToken RefreshToken[]
    answers      Answer[]
}

// Stores information related to a church.
// Attached to account when account's type is Church
model Church {

    userId String @id @db.VarChar(255)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    name    String @db.VarChar(127)
    address String @db.VarChar(127)
    city    String @db.VarChar(127)
    state   String @db.VarChar(127)
    zipCode Int

    locationLat  Float @db.Float
    locationLong Float @db.Float

    // All ReviewAnswers that various users have given
    // regarding this Church
    reviewAnswers  ReviewAnswer[]
    ChurchFeedback ChurchFeedback[]
}

// Stores information related to an individual.
// Attached to account when account's type is Individual
model Individual {

    userId String @id @db.VarChar(255)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    firstName String
    lastName  String

    // All ReviewAnswers this Individual has given
    reviewAnswers  ReviewAnswer[]
    ChurchFeedback ChurchFeedback[]
}

model QuizTemplate {
    id      Int                  @id @default(autoincrement())
    qToTemp QuestionToTemplate[]
}

model Question {
    id   Int    @id @default(autoincrement())
    text String @db.VarChar(255)

    choices String @db.VarChar(255)

    qToTemp      QuestionToTemplate[]
    answers      Answer[]
    ReviewAnswer ReviewAnswer[]
}

model QuestionToTemplate {
    // What order is the question in the template?
    qIndex Int

    questionId Int
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    templateId Int
    template   QuizTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

    @@id([questionId, templateId], name: "id")
}

// An Account's unique answer to a quiz question
model Answer {
    choice Int

    userId String @db.VarChar(255)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    questionId Int
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@id([userId, questionId], name: "id")
}

// An Individual's (or anonymous user's) feedback on
// a given Church
model ChurchFeedback {
    id String @id @default(uuid()) @db.VarChar(255)

    feedback String @db.VarChar(1023)

    churchUser   Church @relation(fields: [churchUserId], references: [userId], onDelete: Cascade)
    churchUserId String @db.VarChar(255)

    indivUser   Individual? @relation(fields: [indivUserId], references: [userId], onDelete: Cascade)
    indivUserId String?     @db.VarChar(255)
}

// Connects an Individual's feedback to a
// Church's Question / Answer.
model ReviewAnswer {
    id String @id @default(uuid()) @db.VarChar(255)

    choice      Int
    comment     String? @db.VarChar(255)
    isAnonymous Boolean @default(true)

    // The Church being reviewed
    churchUser   Church @relation(fields: [churchUserId], references: [userId], onDelete: Cascade)
    churchUserId String @db.VarChar(255)

    // The Individual giving the review
    reviewerUser   Individual? @relation(fields: [reviewerUserId], references: [userId], onDelete: Cascade)
    reviewerUserId String?     @db.VarChar(255)

    // The specific Question being answered and commented on
    questionId Int
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
