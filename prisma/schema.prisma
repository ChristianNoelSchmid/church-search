datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model RefreshToken {
    id      Int      @id @default(autoincrement())
    token   String   @db.VarChar(255)
    expires DateTime

    created     DateTime  @default(now())
    createdByIp String    @db.VarChar(127)
    revoked     DateTime?
    revokedByIp String?   @db.VarChar(127)

    replacementId Int?

    userId String? @db.VarChar(255)
    user   User?   @relation(fields: [userId], references: [id])
}

// The type of a single account
enum UserType {
    Church
    Individual
}

// A user account, which holds all unique data to a particular user
model User {
    id             String   @id @default(uuid()) @db.VarChar(255)
    email          String   @unique
    passwordHash   String
    userType       UserType
    confirmedEmail Boolean  @default(false)

    // The User's quizzes and reviews
    Quiz   Quiz[]
    Review Review[]

    church Church?
    indiv  Individual?

    // The User's Refresh tokens
    refreshToken RefreshToken[]
}

// Stores information related to a church.
// Attached to account when account's type is Church
model Church {
    userId String @db.VarChar(255)
    user   User?  @relation(fields: [userId], references: [id])

    name    String
    address String?

    @@id([userId])
}

// Stores information related to an individual.
// Attached to account when account's type is Individual
model Individual {
    userId String @db.VarChar(255)
    user   User?  @relation(fields: [userId], references: [id])

    firstName String
    lastName  String

    @@id([userId])
}

model QuizTemplate {
    id        Int    @id @default(autoincrement())
    questions String @db.Text
    quizzes   Quiz[]
}

model Quiz {
    id      String @id @default(uuid()) @db.VarChar(255)
    answers String @db.TinyText

    templateId Int
    template   QuizTemplate @relation(fields: [templateId], references: [id])

    userId String @db.VarChar(255)
    user   User   @relation(fields: [userId], references: [id])
}

model Review {
    id String @id @default(uuid()) @db.VarChar(255)

    userId String? @db.VarChar(255)
    user   User?   @relation(fields: [userId], references: [id])

    isAnonymous Boolean @default(false)

    quizId   Int
    answers  String    @db.VarChar(255)
    comments Comment[]
}

model Comment {
    id String @id @default(uuid()) @db.VarChar(255)

    reviewId String @db.VarChar(255)
    review   Review @relation(fields: [reviewId], references: [id])

    answerIndex Int
    comment     String @db.VarChar(255)
}
